{"version":3,"sources":["components/common/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusFunctional.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/selectors/profile-selectors.ts","components/Profile/ProfileContainer.tsx"],"names":["MessageValidationSchema","Yup","shape","message","required","AddMessageForm","sendMessage","placeholder","initialValues","validationSchema","onSubmit","values","formikHelpers","resetForm","render","handleSubmit","onKeyDown","e","key","shiftKey","preventDefault","MyTextArea","name","type","props","useField","field","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","module","exports","ProfileStatusFunctional","React","memo","useState","editMode","setEditMode","status","setStatusValue","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","currentTarget","value","onStatusChangeHandler","ProfileInfo","profile","isOwner","savePhoto","userId","Preloader","className","classes","coverContainer","descriptionBlock","userDescription","userAvatar","src","photos","large","defaultUserAvatar","alt","target","files","userNameBlock","fullName","aboutMe","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","lookingForAJob","lookingForAJobDescription","Post","likesCount","item","MyPosts","posts","addPost","postsElements","map","el","id","postsBlock","actions","MyPostsContainer","Profile","getProfile","getStatus","ProfileContainer","this","match","params","authorizedUserId","history","push","toString","getUserProfile","refreshProfile","prevProps","prevState","snapshot","compose","getIsAuth","getAuthorizedUserId","requestUserProfile","requestStatus","withRouter"],"mappings":"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","file":"static/js/5.f48223a0.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n    Formik,\r\n    useField, FormikProps,\r\n} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\ntype AddMessageFormikPropsType = {\r\n    sendMessage: (message: string) => void\r\n    placeholder: string\r\n}\r\n\r\ntype MyTextAreaPropsType = {\r\n    name: string\r\n    placeholder: string\r\n}\r\n\r\ninterface MyFormValues {\r\n    message: string;\r\n}\r\n\r\nconst MessageValidationSchema = Yup.object().shape({\r\n    message: Yup.string()\r\n        .required('Required')\r\n})\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormikPropsType> = ({sendMessage, placeholder}) => {\r\n    const initialValues: MyFormValues = {message: ''};\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={MessageValidationSchema}\r\n                onSubmit={(values, formikHelpers) => {\r\n                    sendMessage(values.message)\r\n                    formikHelpers.resetForm()\r\n                }}\r\n                render={({handleSubmit}: FormikProps<MyFormValues>) => {\r\n                    return <form\r\n                        onSubmit={handleSubmit}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === 'Enter' && !e.shiftKey) {\r\n                                e.preventDefault()\r\n                                handleSubmit();\r\n                            }\r\n                        }}>\r\n                        <MyTextArea name=\"message\" placeholder={placeholder}/>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </form>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MyTextArea: React.FC<MyTextAreaPropsType> = ({...props}) => {\r\n    const [field] = useField(props)\r\n    return (\r\n        <>\r\n            <textarea {...field} {...props}></textarea>\r\n        </>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to='/login' />\r\n        } else {\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect<MapStateToPropsType, {}, {}, AppStateType>(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__-zbKX\",\"coverContainer\":\"ProfileInfo_coverContainer__13772\",\"userDescription\":\"ProfileInfo_userDescription__3Ii8_\",\"userAvatar\":\"ProfileInfo_userAvatar__1GctN\",\"userNameBlock\":\"ProfileInfo_userNameBlock__1JeFC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__17IVp\",\"postsBlock\":\"MyPosts_postsBlock__1A0vy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1tiVM\",\"active\":\"Post_active__3k2z5\"};","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype ProfilePropsType = {\r\n    status: string | null\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nexport const ProfileStatusFunctional: React.FC<ProfilePropsType> = React.memo((props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatusValue] = useState<string | null>(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        if (status) {\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !editMode && <div><span onDoubleClick={activateEditMode}>{props.status || '----'}</span></div>\r\n            }\r\n            {\r\n                editMode && <div><input autoFocus onBlur={deactivateEditMode} onChange={(e) => onStatusChangeHandler(e)}\r\n                                        value={status || ''}/></div>\r\n            }\r\n        </>\r\n    )\r\n})","import React, {ChangeEvent} from 'react';\r\nimport defaultUserAvatar from '../../../assets/default-user-avatar.jpg'\r\nimport classes from './ProfileInfo.module.css';\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusFunctional} from \"./ProfileStatus/ProfileStatusFunctional\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: UserProfileType\r\n    status: string | null\r\n    savePhoto: (file: File) => void\r\n    updateStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = React.memo(({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    if(profile.userId === 0) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.coverContainer}>\r\n                {/*<img src=\"https://cdn.visitportugal.com/sites/default/files/styles/encontre_detalhe_poi_destaque/public/mediateca/NOV0053.jpg?itok=5d6Ol_29\" alt=\"\"/>*/}\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <div className={classes.userDescription}>\r\n                    <img className={classes.userAvatar} src={profile.photos.large || defaultUserAvatar} alt=\"user-avatar\"/>\r\n                    {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                    <div className={classes.userNameBlock}>\r\n                        <h3>{profile.fullName}</h3>\r\n                        <p>{profile.aboutMe}</p>\r\n                        <ProfileStatusFunctional status={status} updateStatus={updateStatus}/>\r\n                    </div>\r\n                </div>\r\n                <ul>\r\n                    <li>{profile.contacts.github ? profile.contacts.github : `Don't have one`}</li>\r\n                    <li>{profile.contacts.vk ? profile.contacts.vk : `Don't have one`}</li>\r\n                    <li>{profile.contacts.facebook ? profile.contacts.facebook : `Don't have one`}</li>\r\n                    <li>{profile.contacts.instagram ? profile.contacts.instagram : `Don't have one`}</li>\r\n                    <li>{profile.contacts.twitter ? profile.contacts.twitter : `Don't have one`}</li>\r\n                    <li>{profile.contacts.website ? profile.contacts.website : `Don't have one`}</li>\r\n                    <li>{profile.contacts.youtube ? profile.contacts.youtube : `Don't have one`} </li>\r\n                    <li>{profile.contacts.mainLink ? profile.contacts.mainLink : `Don't have one`}</li>\r\n                </ul>\r\n                <div>\r\n                    {`Looking for a job: ${profile.lookingForAJob ? 'yes' : 'no'}`}\r\n                </div>\r\n                {profile.lookingForAJob && <p>{profile.lookingForAJobDescription}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<MessagePropsType> = React.memo(({message, likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://www.cheltv.ru/wp-content/uploads/2018/05/egikG.jpg\" alt=\"\"/>\r\n            {message}\r\n            <div>\r\n                <span>like</span>\r\n                <span>{likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {AddMessageForm} from \"../../common/AddMessageForm/AddMessageForm\";\r\n\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (post: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo(({posts, addPost}) => {\r\n    const postsElements = posts.map(el => {\r\n        return  <Post key={el.id} message={el.message} likesCount={el.likesCount}/>\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <h3 className={classes.postsBlock}>My posts</h3>\r\n            <div>\r\n                <AddMessageForm sendMessage={addPost} placeholder={`What's new? Tell us!`}/>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {\r\n                    postsElements\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","import MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {actions} from \"../../../redux/action-creators\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profile.posts,\r\n    }\r\n}\r\n\r\nconst {addPost} = actions\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: UserProfileType\r\n    status: string | null\r\n    updateStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = React.memo(({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner} savePhoto={savePhoto}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Profile","import {AppStateType} from \"../redux-store\";\r\nimport {UserProfileType} from \"../profile-reducer\";\r\n\r\nexport const getProfile = (state: AppStateType): UserProfileType => {\r\n    return state.profile.profile\r\n}\r\n\r\nexport const getStatus = (state: AppStateType): string => {\r\n    return state.profile.status\r\n}\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\"\r\nimport {RouteComponentProps} from \"react-router\"\r\nimport {requestUserProfile, requestStatus, updateStatus, UserProfileType, savePhoto} from \"../../redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from 'redux';\r\nimport {getProfile, getStatus} from \"../../redux/selectors/profile-selectors\";\r\nimport {getAuthorizedUserId, getIsAuth} from \"../../redux/selectors/auth-selectors\";\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (newStatus: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        let authorizedUserId = this.props.authorizedUserId\r\n        if (!userId && !authorizedUserId) {\r\n            this.props.history.push('/login')\r\n        }\r\n        if (!userId && authorizedUserId) {\r\n            userId = authorizedUserId.toString()\r\n        }\r\n        if (userId) {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: getProfile(state),\r\n        isAuth: getIsAuth(state),\r\n        status: getStatus(state),\r\n        authorizedUserId: getAuthorizedUserId(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile: requestUserProfile,\r\n        getStatus: requestStatus,\r\n        updateStatus,\r\n        savePhoto\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}