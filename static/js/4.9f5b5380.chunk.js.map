{"version":3,"sources":["components/common/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/MessageItem/MessageItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["MessageValidationSchema","Yup","shape","message","required","AddMessageForm","sendMessage","placeholder","initialValues","validationSchema","onSubmit","values","formikHelpers","resetForm","render","handleSubmit","onKeyDown","e","key","shiftKey","preventDefault","MyTextArea","name","type","props","useField","field","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","module","exports","DialogItem","React","memo","id","className","classes","dialog","MessageItem","Dialogs","dialogs","messages","dialogElements","map","el","messagesElements","dialogsItems","DialogsContainer","this","actions","compose","getIsAuth"],"mappings":"4LAqBMA,EAA0BC,MAAaC,MAAM,CAC/CC,QAASF,MACJG,SAAS,cAGLC,EAAsD,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAE9E,OACI,8BACI,cAAC,IAAD,CACIC,cAJwB,CAACL,QAAS,IAKlCM,iBAAkBT,EAClBU,SAAU,SAACC,EAAQC,GACfN,EAAYK,EAAOR,SACnBS,EAAcC,aAElBC,OAAQ,YAAgD,IAA9CC,EAA6C,EAA7CA,aACN,OAAO,uBACHL,SAAUK,EACVC,UAAW,SAACC,GACM,UAAVA,EAAEC,KAAoBD,EAAEE,WACxBF,EAAEG,iBACFL,MALL,UAQH,cAACM,EAAD,CAAYC,KAAK,UAAUf,YAAaA,IACxC,wBAAQgB,KAAK,SAAb,6BAQlBF,EAA4C,SAAC,GAAgB,IAAZG,EAAW,oBAC9D,EAAgBC,YAASD,GAAlBE,EAAP,oBACA,OACI,mCACI,oDAAcA,GAAWF,Q,mHClD/BG,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAYhC,OAAOC,YAAmDN,EAAnDM,EAVmB,SAACT,GACvB,IAAKK,EAAwBL,EAAxBK,OAAWK,EAAhB,YAA6BV,EAA7B,YAEA,OAAKK,EAGM,cAACG,EAAD,eAAeE,IAFf,cAAC,IAAD,CAAUC,GAAG,gB,oBCpBhCC,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,8B,oBCAhED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,4B,oBCA7GD,EAAOC,QAAU,CAAC,QAAU,+B,6HCkBbC,EAVmCC,IAAMC,MAAK,YAAiB,IAAflB,EAAc,EAAdA,KAAMmB,EAAQ,EAARA,GACjE,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SACI,cAAC,IAAD,CAAST,GAAE,mBAAcM,GAAzB,SACKnB,S,oCCEFuB,EARqCN,IAAMC,MAAK,YAAgB,IAAdrC,EAAa,EAAbA,QAC7D,OACI,qBAAKuC,UAAWC,IAAQxC,QAAxB,SACKA,O,SC8BE2C,EA3B6BP,IAAMC,MAAK,YAAuC,IAArCO,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,SAAU1C,EAAiB,EAAjBA,YAE9D2C,EAAiBF,EAAQG,KAAI,SAAAC,GAC/B,OAAO,cAAC,EAAD,CAAwB7B,KAAM6B,EAAG7B,KAAMmB,GAAIU,EAAGV,IAA7BU,EAAGV,OAGzBW,EAAmBJ,EAASE,KAAI,SAAAC,GAClC,OAAO,cAAC,EAAD,CAAyBhD,QAASgD,EAAGhD,SAAnBgD,EAAGV,OAGhC,OACI,sBAAKC,UAAWC,IAAQI,QAAxB,UACI,qBAAKL,UAAWC,IAAQU,aAAxB,SAEQJ,IAGR,sBAAKP,UAAWC,IAAQK,SAAxB,UACI,8BAAMI,IACN,8BACI,cAAC/C,EAAA,EAAD,CAAgBC,YAAaA,EAAaC,YAAa,iC,uCCXzE+C,E,4JACF,WACI,OAAO,cAAC,EAAD,CACPP,QAASQ,KAAK/B,MAAMuB,QACpBC,SAAUO,KAAK/B,MAAMwB,SACrB1C,YAAaiD,KAAK/B,MAAMlB,kB,GALDiC,IAAMP,WAiB9B1B,EAAekD,IAAflD,YAEQmD,sBACXxB,aAXoB,SAACL,GACrB,MAAO,CACHmB,QAASnB,EAAMmB,QAAQA,QACvBC,SAAUpB,EAAMmB,QAAQC,SACxBnB,OAAQ6B,YAAU9B,MAOkE,CAACtB,gBACzFyB,IAFW0B,CAGbH","file":"static/js/4.9f5b5380.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n    Formik,\r\n    useField, FormikProps,\r\n} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\ntype AddMessageFormikPropsType = {\r\n    sendMessage: (message: string) => void\r\n    placeholder: string\r\n}\r\n\r\ntype MyTextAreaPropsType = {\r\n    name: string\r\n    placeholder: string\r\n}\r\n\r\ninterface MyFormValues {\r\n    message: string;\r\n}\r\n\r\nconst MessageValidationSchema = Yup.object().shape({\r\n    message: Yup.string()\r\n        .required('Required')\r\n})\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormikPropsType> = ({sendMessage, placeholder}) => {\r\n    const initialValues: MyFormValues = {message: ''};\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={MessageValidationSchema}\r\n                onSubmit={(values, formikHelpers) => {\r\n                    sendMessage(values.message)\r\n                    formikHelpers.resetForm()\r\n                }}\r\n                render={({handleSubmit}: FormikProps<MyFormValues>) => {\r\n                    return <form\r\n                        onSubmit={handleSubmit}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === 'Enter' && !e.shiftKey) {\r\n                                e.preventDefault()\r\n                                handleSubmit();\r\n                            }\r\n                        }}>\r\n                        <MyTextArea name=\"message\" placeholder={placeholder}/>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </form>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MyTextArea: React.FC<MyTextAreaPropsType> = ({...props}) => {\r\n    const [field] = useField(props)\r\n    return (\r\n        <>\r\n            <textarea {...field} {...props}></textarea>\r\n        </>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to='/login' />\r\n        } else {\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect<MapStateToPropsType, {}, {}, AppStateType>(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__F55JS\",\"active\":\"DialogsItem_active__3E_mg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Q43Z\",\"dialogsItems\":\"Dialogs_dialogsItems__3yGps\",\"messages\":\"Dialogs_messages__7PslY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__3gUsa\"};","import classes from \"./DialogsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemPropsType> = React.memo(({name, id}) => {\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink to={`/dialogs/${id}`}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./MessageItem.module.css\";\r\n\r\nexport type MessageItemPropsType = {\r\n    message: string\r\n}\r\n\r\nconst MessageItem: React.FC<MessageItemPropsType> = React.memo(({message}) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {message}\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MessageItem;","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport {DialogsType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageForm} from \"../common/AddMessageForm/AddMessageForm\";\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = React.memo(({dialogs, messages, sendMessage}) => {\r\n\r\n        const dialogElements = dialogs.map(el => {\r\n            return <DialogItem key={el.id} name={el.name} id={el.id}/>\r\n        })\r\n\r\n        const messagesElements = messages.map(el => {\r\n            return <MessageItem key={el.id} message={el.message} />\r\n        })\r\n\r\n        return (\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {\r\n                        dialogElements\r\n                    }\r\n                </div>\r\n                <div className={classes.messages}>\r\n                    <div>{messagesElements}</div>\r\n                    <div>\r\n                        <AddMessageForm sendMessage={sendMessage} placeholder={'Enter you message'}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {actions} from \"../../redux/action-creators\";\r\nimport {DialogsType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getIsAuth} from \"../../redux/selectors/auth-selectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: DialogsType[]\r\n    messages: MessageType[]\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass DialogsContainer extends React.Component<PropsType> {\r\n    render() {\r\n        return <Dialogs\r\n        dialogs={this.props.dialogs}\r\n        messages={this.props.messages}\r\n        sendMessage={this.props.sendMessage}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogs.dialogs,\r\n        messages: state.dialogs.messages,\r\n        isAuth: getIsAuth(state)\r\n    }\r\n}\r\n\r\nconst {sendMessage} = actions\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect\r\n)(DialogsContainer)"],"sourceRoot":""}